apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-products-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      project: micro-products-deploy
  template:
    metadata:
      labels:
        project: micro-products-deploy
    spec:
      initContainers:
        - name: init-db
          image: busybox
          command: [ 'sh', '-c', 'until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2; done;' ]
      containers:
        - name: micro-products
          image: bbiegajlo/micro-products:0.5.0 # change image if necessary
          env:
            - name: DATABASE_HOST
              value: micro-postgres-service  # name of your PostgreSQL service in other deploy.yaml
            - name: DATABASE_PORT
              value: "5432"  # Standard PostgreSQL port
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              value: "postgres"
            - name: DATABASE_NAME
              value: "micropostgres"
          # todo someday - passwords can be stored in secrets
          ports:
            - containerPort: 8080  # Adjust if app uses a different port

---

apiVersion: v1
kind: Service
metadata:
  name: micro-products-service
spec:
  type: ClusterIP
  selector:
    project: micro-products-deploy  # This should match the labels of your app's pods
  ports:
    - name: products-api
      port: 8080  # The port your app is listening on inside the cluster
      targetPort: 8080  # The target port on the pod
      protocol: TCP
      # nodePort: 31111  # The port exposed on each node. This must be in the range 30000-32767

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro-orders-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      project: micro-orders-deploy
  template:
    metadata:
      labels:
        project: micro-orders-deploy
    spec:
      initContainers:
        - name: init-db
          image: busybox
          command: [ 'sh', '-c', 'until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2; done;' ]
      containers:
        - name: micro-orders
          image: bbiegajlo/micro-orders:0.3.0 # change image if necessary
          env:
            - name: DATABASE_HOST
              value: micro-postgres-service  # name of your PostgreSQL service in other deploy.yaml
            - name: DATABASE_PORT
              value: "5432"  # Standard PostgreSQL port
            - name: DATABASE_USER
              value: "postgres"
            - name: DATABASE_PASSWORD
              value: "postgres"
            - name: DATABASE_NAME
              value: "micropostgres"
          # todo someday - passwords can be stored in secrets
          ports:
            - containerPort: 8081  # Adjust if app uses a different port

---

apiVersion: v1
kind: Service
metadata:
  name: micro-orders-service
spec:
  type: ClusterIP
  selector:
    project: micro-orders-deploy  # This should match the labels of your app's pods
  ports:
    - name: orders-api
      port: 8081  # The port your app is listening on inside the cluster
      targetPort: 8081  # The target port on the pod
      protocol: TCP
      # nodePort: 31112  # The port exposed on each node. This must be in the range 30000-32767

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: micro-ingress
spec:
  rules:
    - http:
        paths:
          - path: /products
            pathType: Prefix
            backend:
              service:
                name: micro-products-service
                port:
                  number: 8080
          - path: /orders
            pathType: Prefix
            backend:
              service:
                name: micro-orders-service
                port:
                  number: 8081